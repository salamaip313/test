#include <ArduinoJson.h>
//#include <avr/wdt.h>
#include <TinyGPS.h>
#include <Wire.h>//RTC SDA pin A4 / SCL pin A5 or pin 20 SDA and 21 SCL mega
#include <SPI.h>
#include <SD.h>
#include <dht11.h>
#include "SIM800L.h"
#include "RTClib.h"
//A12 A14 analog , 44 and 46 PWM ,40 and 42 digital ,d32 5V indecator
/////////////////const pins //////////////////////////////////
#define SIM800_RST_PIN 23//reset pin for GSM
#define DHT11PIN 3 //temperature pin
#define counter_work_pin 35//connect to pin 8 with ARM
#define counter_data_pin 33//connect to pin 9 with ARM
const int chipSelect = 53;//chip select for sd card
//MOSI 51 mega pin 11
//MISO 50 mega pin 12
//CLK  52 mega pin 13
/////////////////////////////////////////////////////////////

/////////////////const variables/////////////////////////////
char APN[30] ;//Internet.be
char USER[20] ;
char PWD[20] ;
String apn = "";
String user = "";
String pwd = "";
const char URL[] = "https://b7b6064a84fbb487b740f064fe23cd7e.m.pipedream.net";
const char URL2[] = "https://eae28fca4417ffdee70b28e8b58487c6.m.pipedream.net";
const char CONTENT_TYPE[] = "application/json";
uint16_t rc = 0;//receive code from http web api
char data[400];//array for data of sensors and counter
char check[50];//array for check status
char Gps[200];//array for gps data for OFF state
char old_data[400];//array that will be send old data from SD card
char er[30];
/////////////////////////////////////////////////////////////

////////////////variables////////////////////////////////////
float lati, loni;//latitude and longitude for gps
boolean gps_read = false;//gps check for data is ready
char lat[20], lon[20];//char array to make ready for send to http
String la, lo = "";//string for collect data of gps
String D, T;//string for collect date and time
char Date[11], Time[6];//char array to make ready for send to http
int temp_check;//to store temp from sensor
boolean ON_OFF_state = false;//status of system all True = ON / False = OFF
int do_count ; //counter for do code one time every 15 min
boolean check_count = true;//to do one time for check operation
int Min = 1; //to check the min to send check data
int Min_now = 0;//time(minute) now from rtc
String FileName_SD_card = ""; //file that will be file name for data of day
String oldData = "";//to store name of file from http
char filename[30];//file name for SD card final
char old_file_name[30];//file name from http
boolean read_state = false;//for read from sd card or not
String Receive = "";//data read from SD Card
String c = "";//for string data that will recieve from counter micro
int r = 0, t = 0;//counter for store data in array
String counter[3];//counter small , meduim and large
char small[8];//array to send small counter
char meduim[8];//array to send meduim counter
char large[8];//array to send large counter
/////////////////////////////////////////////////////////////

/////////////////buffers/////////////////////////////////////
DynamicJsonBuffer jsonBuffer;//create json object
SIM800L* sim800l;//create gsm object
TinyGPS gps;// create gps object
RTC_DS1307 rtc;// Create a RealTimeClock object
DateTime  now ;// Read data from the RTC Chip
dht11 DHT11;
File myFile;
File dataFile;
////////////////////////////////////////////////////////////

//////////////////functions////////////////////////////////
void get_GPS() {
  for (int q = 0; q < 300; q++) {
    while (Serial2.available()) { // check for gps data
      if (gps.encode(Serial2.read())) // encode gps data
      {
        gps.f_get_position(&lati, &loni); // get latitude and longitude
        gps_read = true;
        Serial.println("Position: ");

        //Latitude
        Serial.print("Latitude: ");
        la = String(lati, 6);
        Serial.print(la);

        Serial.print(",");

        //Longitude
        Serial.print("Longitude: ");
        lo = String(loni, 6);
        Serial.println(lo);
      }
      //wdt_reset();//rest WDT
    }
    delay(10);
    //wdt_reset();//rest WDT
  }

}

String Data_name(String u) {
  String Name = "";
  boolean c = false;
  for (int o = 2; o <= u.length(); o++) {
    if (u.charAt(o) != '-' ) {
      Name += u.charAt(o);
    }
    else if (u.charAt(o) == '-' && c == false) {
      c = true;
      Name += u.charAt(o);
    }
    else if (u.charAt(o) == '-' && c == true) {
      Name += u.charAt(o);
      Name += u.charAt(o + 1);
      Name += u.charAt(o + 2);
      Serial.print("Name=");
      Serial.println(Name);
      return Name;
      break;
    }
    //wdt_reset();//rest WDT
  }
}

// function that executes whenever data is received from master
void receiveEvent(int howMany) {
  while (0 < Wire.available()) {
    c = Wire.readStringUntil('}');      /* receive byte as a character */
  }
  //  Serial.println(c);
  for (int v = 0; v <= c.length(); v++)
  {
    if (c.charAt(v) == ',')
    {
      counter[t] = c.substring(r, v);
      r = (v + 1);
      t++;
    }
    //wdt_reset();//rest WDT
  }
  //  Serial.println(counter[0]);
  //  Serial.println(counter[1]);
  //  Serial.println(counter[2]);

  c = "";
  t = 0;
  r = 0;
}


void setupModule() {
  //wdt_reset();//rest WDT
  // Wait until the module is ready to accept AT commands
  Serial.println(F("initializing..."));
  while (!sim800l->isReady()) {
    delay(1000);
    //wdt_reset();//rest WDT
  }

  Serial.println(F("Setup Complete!"));

  // Wait for the GSM signal
  uint8_t signal = sim800l->getSignal();
  while (signal <= 0) {
    delay(1000);
    //wdt_reset();//rest WDT
    signal = sim800l->getSignal();
  }
  Serial.print(F("Signal OK (strenght: "));
  Serial.print(signal);
  Serial.println(F(")"));
  delay(1000);
  //wdt_reset();//rest WDT

  // Wait for operator network registration (national or roaming network)
  NetworkRegistration network = sim800l->getRegistrationStatus();
  while (network != REGISTERED_HOME && network != REGISTERED_ROAMING) {
    delay(1000);
    //wdt_reset();//rest WDT
    network = sim800l->getRegistrationStatus();
  }

  //  Serial.println(sim800l->getSimCardNumber());

  Serial.println(F("Network registration OK"));


  // Setup APN for GPRS configuration

  /////////////vodafone////////////////
  //  apn = "internet.vodafone.net";
  //  apn.toCharArray(APN, 30);
  //  user = "internet";
  //  user.toCharArray(USER, 20);
  //  pwd = "internet";
  //  pwd.toCharArray(PWD, 20);
  //////////// etisalat/////////////////
  apn = "etisalat";
  apn.toCharArray(APN, 30);
  user = "";
  user.toCharArray(USER, 20);
  pwd = "";
  pwd.toCharArray(PWD, 20);
  ///////// orange mobinil///////////////
  //  apn = "mobinilweb";
  //  apn.toCharArray(APN, 30);
  //  user = "";
  //  user.toCharArray(USER, 20);
  //  pwd = "";
  //  pwd.toCharArray(PWD, 20);
  ////////// WE telecom egypt/////////////
  //  apn = "internet.te.eg";
  //  apn.toCharArray(APN, 30);
  //  user = "internet";
  //  user.toCharArray(USER, 20);
  //  pwd = "internet";
  //  pwd.toCharArray(PWD, 20);


  bool success = sim800l->setupGPRS(APN, USER, PWD);
  while (!success) {
    success = sim800l->setupGPRS(APN, USER, PWD);
    Serial.println("here");
    Serial.println(Serial1.read());
    delay(3000);
    //wdt_reset();//rest WDT
  }
  Serial.println(F("GPRS config OK"));
  // Establish GPRS connectivity (5 trials)
  bool connected = false;
  for (uint8_t i = 0; i < 5 && !connected; i++) {
    delay(2000);
    //wdt_reset();//rest WDT
    connected = sim800l->connectGPRS();
    //wdt_reset();//rest WDT
  }

  // Check if connected, if not reset the module and setup the config again
  if (connected) {
    Serial.println(F("GPRS connected !"));
  } else {
    Serial.println(F("GPRS not connected !"));
    Serial.println(F("Reset the module."));
    sim800l->reset();
    //wdt_reset();//rest WDT
    setupModule();
    return;
  }
  //wdt_reset();//rest WDT
}

void http_check() {
  if (rc == 200) {
    // Success, output the data received on the serial
    Serial.print(F("HTTP POST successful ("));
    Serial.print(sim800l->getDataSizeReceived());
    Serial.println(F(" bytes)"));
    Serial.print(F("Received : "));
    Serial.println(sim800l->getDataReceived());
    //wdt_reset();//rest WDT
    JsonObject& doc = jsonBuffer.parseObject(sim800l->getDataReceived());
    /////////////////////////////////////////////////////////////////
    /////////////////check the status update/////////////////////////

    String val1 = doc["status"];
    int val2 = doc["valve"];
    int val3 = doc["co2"];
    boolean val4 = doc["read"];
    String val5 = doc["file"];

    oldData = val5;

    Serial.println(val1);
    Serial.println(val2);
    Serial.println(val3);
    Serial.println(val4);
    Serial.println(val5);

    jsonBuffer.clear();
    //wdt_reset();//rest WDT

    if (val1 == "on" || val1 == "ON") {
      ON_OFF_state = true;
      digitalWrite(counter_work_pin, HIGH);
    }
    else if (val1 == "off" || val1 == "OFF") {
      ON_OFF_state = false;
      digitalWrite(counter_work_pin, LOW);
    }

    if (val4 == true) {
      read_state = true;
    }
    else if (val4 == false ) {
      read_state = false;
    }
    rc = 0;
  }

  else
  {
    // Failed...
    Serial.print(F("HTTP POST error "));
    Serial.println(rc);
    Serial.println(F("Reset the module."));
    sim800l->reset();
    setupModule();
  }
  rc = 0;
}
void http_check2() {
  if (rc == 200) {
    // Success, output the data received on the serial
    Serial.print(F("HTTP POST successful ("));
    Serial.print(sim800l->getDataSizeReceived());
    Serial.println(F(" bytes)"));
    Serial.print(F("Received : "));
    Serial.println(sim800l->getDataReceived());
    //wdt_reset();//rest WDT
    rc = 0;
  }
  else
  {
    // Failed...
    Serial.print(F("HTTP POST error "));
    Serial.println(rc);
    Serial.println(F("Reset the module."));
    sim800l->reset();
    setupModule();
  }
  rc = 0;
}

void send_check() {
  delay(1000);
  Serial.println(F("Start HTTP POST Check..."));
  // Do HTTP POS"T communication with 10s for the timeout (read and write)
  sprintf(check, "{\"serlNum\":\"123456789\",\"status\":\"Check\"}");
  //  wdt_disable();
  rc = sim800l->doPost(URL, CONTENT_TYPE, check, 10000, 10000);
  //  wdt_enable(WDTO_8S);//Watch Dog Timer
  //wdt_reset();//rest WDT
  http_check();
  //wdt_reset();//rest WDT
}

void send_data_ON() {
  Serial.println("Collect Data...");

  get_GPS();//Read GPS data
  la.toCharArray(lat, 10);
  lo.toCharArray(lon, 10);

  now = rtc.now();  // Read data from the RTC Chip
  D =  String(now.year(), DEC) + "-" + String (now.month(), DEC) + "-" + String (now.day(), DEC);
  T = String(now.hour(), DEC) + ":" + String( now.minute(), DEC);
  D.toCharArray(Date, 11);
  T.toCharArray(Time, 6);
  Serial.println(Date);
  Serial.println(Time);

  for (int u = 0; u < 3; u++) {
    int chk = DHT11.read(DHT11PIN); //Read data from temperature sensor
    //wdt_reset();//rest WDT
    delay(100);
  }
  Serial.print("Humidity (%): ");
  Serial.println(DHT11.humidity);
  Serial.print("Temperature (C): ");
  Serial.println(DHT11.temperature);

  ///////////////////////////Get Data from Counter//////////////////////////
  digitalWrite(counter_data_pin, HIGH);//pin to counter to stop count and send data
  Serial.println("reading...");
  delay(1000);
  //wdt_reset();//rest WDT
  digitalWrite(counter_data_pin, LOW);
  //rest pin to counter //
  ////////////////////////
  Serial.print("small=");
  Serial.println(counter[0]);
  Serial.print("meduim=");
  Serial.println(counter[1]);
  Serial.print("large=");
  Serial.println(counter[2]);
  counter[0].toCharArray(small, counter[0].length() + 1);
  counter[1].toCharArray(meduim, counter[1].length() + 1);
  counter[2].toCharArray(large, counter[2].length() + 1);
  counter[0] = "";
  counter[1] = "";
  counter[2] = "";

  /////////////////////////////////////////////////////////////////
  /////////////////check the status update/////////////////////////

  //////////////////////////////////////////////////////////////////////////
  ////////////////////////////data in json style////////////////////////////
  sprintf(data, "{\"counter\":\"true\",\"readingsmall\":\"%s\",\"readingMosuqitoes\":\"%s\",\"readingLarg\":\"%s\",\"readingTempIn\":\"%d\",\"serlNum\":\"123456789\",\"readingTempOut\":\"%d\",\"readingHumidty\":\"%d\",\"readingDate\":\"%s\",\"readingTime\":\"%s\",\"readingLatude\":\"%s\",\"readingLng\":\"%s\",\"readingWindSpeed\":\"99\",\"co2\":\"88\",\"co2Val\":\"77\"}"
          , small, meduim, large , DHT11.temperature, DHT11.temperature, DHT11.humidity , Date, Time, lat, lon);
  ////////////////////////////////////////////////////////////////////////
  //wdt_reset();//rest WDT
  ///////////////////////store data in SD card////////////////////////////
  FileName_SD_card = Data_name(D);

  FileName_SD_card.toCharArray(filename, FileName_SD_card.length() + 1);
  FileName_SD_card = "";
  sprintf(filename, "%s.txt", filename);
  Serial.println(filename);


  myFile = SD.open(filename, FILE_WRITE);
  myFile.println(data);
  myFile.close();

  Serial.println("Data stored");

  // Check to see if the file exists:
  if (SD.exists(filename)) {
    Serial.println("File exists.");
  } else {
    Serial.println("File doesn't exist.");
  }
  ////////////////////////////////////////////////////////////////////////////

  delay(1000);
  Serial.println(F("Start HTTP POST Data..."));
  // Do HTTP POS"T communication with 10s for the timeout (read and write)
  //  wdt_disable();
  rc = sim800l->doPost(URL2, CONTENT_TYPE, data, 10000, 10000);
  //  wdt_enable(WDTO_8S);//Watch Dog Timer
  //wdt_reset();//rest WDT
  http_check2();
  //wdt_reset();//rest WDT

}

void send_gps() {
  Serial.println("Collect GPS Data...");
  get_GPS();//Read GPS data
  la.toCharArray(lat, 10);
  lo.toCharArray(lon, 10);
  Serial.println(F("Start HTTP POST GPS..."));
  // Do HTTP POS"T communication with 10s for the timeout (read and write)
  sprintf(Gps, "{\"serlNum\":\"123456789\",\"readingLatude\":\"%s\",\"readingLng\":\"%s\"}", lat, lon);
  //  wdt_disable();
  rc = sim800l->doPost(URL2, CONTENT_TYPE, Gps, 10000, 10000);
  //  wdt_enable(WDTO_8S);//Watch Dog Timer
  //wdt_reset();//rest WDT
  http_check2();
  //wdt_reset();//rest WDT

}
///////////////////////////////////////////////////////////


void setup() {
  //  wdt_enable(WDTO_8S);//Watch Dog Timer
  //wdt_reset();//rest WDT
  // Initialize Serial Monitor for debugging
  Serial.begin(9600);
  // Initialize the hardware Serial1 for GSM
  Serial1.begin(9600);
  // Initialize the hardware Serial1 for GPS
  Serial2.begin(9600);
  // Initialize the hardware Serial1 for Counter
  Serial3.begin(9600);

  Serial.println("Starting...");
  Wire.begin(8);/* join i2c bus with address 8 */
  Wire.onReceive(receiveEvent); /* register receive event */

  pinMode(counter_work_pin, OUTPUT);//4
  pinMode(counter_data_pin, OUTPUT);//5
  digitalWrite(counter_work_pin, LOW);
  digitalWrite(counter_data_pin, LOW);


  if (!SD.begin(chipSelect)) {
    Serial.println("SD Card error!");
    return;
  }

  rtc.begin(); // Start the RTC library code
  //  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  //rtc.adjust(DateTime(2020, 12, 01, 0, 56, 00));
  now = rtc.now();  // Read data from the RTC Chip
  Min_now = now.minute();
  Min = Min_now + 3;

  ///////////////////Serial///////////////////////////////////
  Serial.print("Time now =");
  Serial.println(String( now.hour(), DEC) + ":" + String( now.minute(), DEC));
  ///////////////////////////////////////////////////////////////////////////////

  if ( now.minute() >= 0 &&  now.minute() <= 14)
    do_count = 0;
  else if ( now.minute() > 14 &&  now.minute() <= 29)
    do_count = 1;
  else if ( now.minute() > 29 &&  now.minute() <= 44)
    do_count = 2;
  else if ( now.minute() > 44 &&  now.minute() <= 59)
    do_count = 3;
  // Initialize SIM800L driver with an internal buffer of 200 bytes and a reception buffer of 512 bytes, debug disabled
  sim800l = new SIM800L((Stream *)&Serial1, SIM800_RST_PIN, 400, 512);
  // Setup module for GPRS communication
  setupModule();
  send_check();
  delay(2000);
  //wdt_reset();//rest WDT
}

void loop() {
  now = rtc.now();  // Read data from the RTC Chip
  Min_now = now.minute();
  ///////////////////Serial & LCD //////////////////////////////////////////////
  Serial.print("Time now =");
  Serial.println(String( now.hour(), DEC) + ":" + String( now.minute(), DEC));
  //////////////////////////////////////////////////////////////////////////////
  delay(1000);
  //wdt_reset();//rest WDT
  if (Min >= 59)
    Min = 1;
  if (Min_now == Min && check_count == true)
  {
    Min += 3;
    check_count = false;
    send_check();
    delay(2000);
    //wdt_reset();//rest WDT
    //if he want to read from SD card or not
    if (read_state == true)
    {
      Serial.println("Reading from SD Card...");
      oldData += ".txt";

      oldData.toCharArray(old_file_name, 400);

      Serial.println(old_file_name);
      dataFile = SD.open(old_file_name);

      // if the file is available, write to it:

      if (dataFile) {
        //wdt_reset();//rest WDT
        while (dataFile.available()) {
          Receive = dataFile.readStringUntil('}');
          Serial.println("Reading...");
          //wdt_reset();//rest WDT
          if (Receive.length() > 2 )
          {
            Receive += "}";
            Receive.toCharArray(old_data, 400);
            rc = sim800l->doPost(URL2, CONTENT_TYPE, old_data, 10000, 10000);
            Serial.println(old_data);
            Receive = "";
            Serial.println("Done!...");
            //wdt_reset();//rest WDT
          }
        }
        dataFile.close();
      }
      // if the file isn't open, pop up an error:
      else {
        Serial.println("error opening datalog.txt");
      }
    }
  }
  else if (Min_now != Min )
  {
    check_count = true;
  }

  ////////////////////System ON//////////////////////////////////////
  if ( now.minute() >= 0 &&  now.minute() <= 14 && do_count == 0) {
    do_count = 1;
    //////////////store data at SD card/////////////////////
    Serial.println("mode 1");
    ////////////////////System ON///////////////////////////
    if (ON_OFF_state == true)//system is ON
    {
      digitalWrite(counter_work_pin, HIGH);
      Serial.println("system ON");
      //counter code is here
      send_data_ON();
    }
    ////////////////////////////////////////////////////////
    ////////////////////System OFF//////////////////////////
    else if (ON_OFF_state == false)// system is OFF
    {
      digitalWrite(counter_work_pin, LOW);
      Serial.println("system OFF");
      send_gps();
    }
  }
  ////////////////////////////////////////////////////////
  else if ( now.minute() > 14 &&  now.minute() <= 29 && do_count == 1) {
    do_count = 2;
    //////////////store data at SD card/////////////////////
    Serial.println("mode 2");
    ////////////////////System ON///////////////////////////
    if (ON_OFF_state == true)//system is ON
    {
      digitalWrite(counter_work_pin, HIGH);
      Serial.println("system ON");
      //counter code is here
      send_data_ON();
    }
    ////////////////////////////////////////////////////////
    ////////////////////System OFF//////////////////////////
    else if (ON_OFF_state == false)// system is OFF
    {
      digitalWrite(counter_work_pin, LOW);
      Serial.println("system OFF");
      send_gps();
    }
  }
  ////////////////////////////////////////////////////////
  else if ( now.minute() > 29 &&  now.minute() <= 44 && do_count == 2) {
    do_count = 3;
    //////////////store data at SD card/////////////////////
    Serial.println("mode 3");
    ////////////////////System ON///////////////////////////
    if (ON_OFF_state == true)//system is ON
    {
      digitalWrite(counter_work_pin, HIGH);
      Serial.println("system ON");
      //counter code is here
      send_data_ON();
    }
    ////////////////////////////////////////////////////////
    ////////////////////System OFF//////////////////////////
    else if (ON_OFF_state == false)// system is OFF
    {
      digitalWrite(counter_work_pin, LOW);
      Serial.println("system OFF");
      send_gps();
    }

  }
  ////////////////////////////////////////////////////////
  else if ( now.minute() > 44 &&  now.minute() <= 59 && do_count == 3) {
    do_count = 0;
    //////////////store data at SD card/////////////////////
    Serial.println("mode 4");

    ////////////////////System ON///////////////////////////
    if (ON_OFF_state == true)//system is ON
    {
      digitalWrite(counter_work_pin, HIGH);
      Serial.println("system ON");
      //counter code is here
      send_data_ON();
    }
    ////////////////////////////////////////////////////////
    ////////////////////System OFF//////////////////////////
    else if (ON_OFF_state == false)// system is OFF
    {
      digitalWrite(counter_work_pin, LOW);
      Serial.println("system OFF");
      send_gps();
    }
  }
  ///////////////////////////////////////////////////////////////////
}
